package stepDefinations;

import static io.restassured.RestAssured.*;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import resources.APIResources;
import resources.Utils;
import java.io.IOException;
import org.junit.Assert;
import Payloads.AddBookPayload;



public class AddPlaceAPI extends Utils{

	public Response resp;
	public RequestSpecification httpreq;
	
	
	public static String BookId;


	@Given("Add place payload with {string} {string} and {string}")
	public void add_place_payload_with_and(String isbn, String aisle, String authorname) throws IOException {
		
		httpreq = given().log().all().spec(requestSpec())
				.body(AddBookPayload.addBook(isbn, aisle, authorname));
	

	}

	@When("^user calls the \"([^\"]*)\" payload using \"([^\"]*)\" http request$")
    public void user_calls_the_something_payload_using_something_http_request(String resource, String method) throws Throwable {

		APIResources resourcename = APIResources.valueOf(resource);
		System.out.println(resourcename.getResource());
		
		if(method.equalsIgnoreCase("POST"))
		{
		resp = httpreq.when().post(resourcename.getResource()).then().spec(responseSpec()).extract().response();
		System.out.println(resp.asPrettyString());
		}
		else if(method.equalsIgnoreCase("GET"))
		{
		resp = httpreq.when().get(resourcename.getResource()).then().spec(responseSpec()).extract().response();
		System.out.println(resp.asPrettyString());
		}
		else if(method.equalsIgnoreCase("DELETE"))
		{
		resp = httpreq.when().delete(resourcename.getResource()).then().spec(responseSpec()).extract().response();
		System.out.println(resp.asPrettyString());
		}	

	}

	@Then("place should be successfully verified with success code as {int}")
	public void place_should_be_successfully_verified_with_success_code_as(Integer responsecode) {

		int expectedresponsecode = responsecode;
		int actualresponsecode = resp.getStatusCode();
		Assert.assertEquals(actualresponsecode, expectedresponsecode);


	}

	@And("{string} in the response body should be {string}")
	public void in_the_response_body_should_be(String key, String value) {

	
		String status = getJsonPath(resp, key);
		System.out.println(status);

		Assert.assertEquals(status, value);


	}
	
	@And("^Fetch the details by using BookId generated by calling \"([^\"]*)\" using \"([^\"]*)\" http request$")
    public void fetch_the_details_by_using_bookid_generated_by_calling_something_using_something_http_request(String resource, String method) throws Throwable {
	      
		
		BookId = getJsonPath(resp, "ID");
		 
		 httpreq = given().log().all().spec(requestSpec()).queryParam("ID", BookId);
		 user_calls_the_something_payload_using_something_http_request(resource,method);
		 
	 
	    }

	@Given("^BookId to validate delete place API$")
    public void bookid_to_validate_delete_place_api() throws Throwable {
       
		httpreq = given().log().all().spec(requestSpec()).body(AddBookPayload.deleteBook(BookId));
    }
	
	
	
	/*
	
	@Given("^Place Id created using Add Place API$")
    public void place_id_created_using_add_place_api() throws Throwable {
        
		BookId = isbn+aisle;
		System.out.println(BookId);
		httpreq = given().log().all().spec(RequestAndResponsespec.requestSpec()).queryParam("ID", BookId);
		
    } */

	
	




}
